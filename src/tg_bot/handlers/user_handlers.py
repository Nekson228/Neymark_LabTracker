import io
import csv
from datetime import timedelta, datetime

from PIL import Image

from aiogram import Router, types, F, Bot
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext


from src.tg_bot.services.analysis_service import AnalysisService
from src.tg_bot.models.analysis_models import AnalysesQuery

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
class AnalysisPeriod(StatesGroup):
    choosing_start = State()
    entering_start_date = State()
    choosing_end = State()
    entering_end_date = State()

class ScanState(StatesGroup):
    waiting_for_photo = State()

class PromptState(StatesGroup):
    waiting_for_prompt = State()

@router.message(Command("start"))
async def cmd_start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="/scan"), types.KeyboardButton(text="/analyse")],
            [types.KeyboardButton(text="/ask")],
            [types.KeyboardButton(text="/history")]
        ],
        resize_keyboard=True
    )
    await message.answer("Welcome! Use /scan, /analyse, /history or /ask commands.", reply_markup=keyboard)

@router.message(Command("ask"))
async def cmd_ask_start(message: types.Message, state: FSMContext):
    await state.clear() # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    await message.answer(
        "–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∫ –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–æ–≤. –ù–∞–ø—Ä–∏–º–µ—Ä: '–∫–∞–∫–æ–π —É –º–µ–Ω—è –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–µ–º–æ–≥–ª–æ–±–∏–Ω?' –∏–ª–∏ '–ø–æ–∫–∞–∂–∏ –¥–∏–Ω–∞–º–∏–∫—É —Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω–∞'.\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel."
    )
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –±–æ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
    await state.set_state(PromptState.waiting_for_prompt)

@router.message(StateFilter(PromptState.waiting_for_prompt), F.text)
async def process_user_prompt(message: types.Message, state: FSMContext):
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ
    if message.text.lower() in ['/cancel', '–æ—Ç–º–µ–Ω–∞']:
        await message.reply("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.clear()
        await cmd_start(message)
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
    processing_message = await message.reply("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ –∏—Å—Ç–æ—Ä–∏—é... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")

    try:
        user_id = message.from_user.id
        user_prompt = message.text

        # –í—ã–∑—ã–≤–∞–µ–º –≤–∞—à –º–µ—Ç–æ–¥ –∏–∑ AnalysisService
        # –í–ê–ñ–ù–û: —Ç.–∫. pandas –∏ GPT –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–ª–≥–æ, –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        # —ç—Ç–æ—Ç –≤—ã–∑–æ–≤ —Å—Ç–æ–∏—Ç –æ–±–µ—Ä–Ω—É—Ç—å –≤ asyncio.to_thread, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞.
        result = AnalysisService.analyse_by_prompt(user_id=user_id, user_prompt=user_prompt)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await processing_message.edit_text(result.summary)

    except Exception as e:
        await processing_message.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    finally:
        # –í–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.clear()
    
@router.message(StateFilter(PromptState.waiting_for_prompt))
async def incorrect_prompt_input(message: types.Message):
    await message.reply("–Ø –æ–∂–∏–¥–∞—é —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /cancel.")

@router.message(Command("scan"))
async def cmd_scan_start(message: types.Message, state: FSMContext):
    await state.clear() # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤ –¥—Ä—É–≥–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel.")
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ
    await state.set_state(ScanState.waiting_for_photo)

@router.message(StateFilter(ScanState.waiting_for_photo), F.photo)
async def cmd_scan(message: types.Message, bot: Bot, state: FSMContext):
    if not message.photo:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.")
        return
    
    processing_message = await message.reply("üî¨ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")

    try:
        file_id = message.photo[-1].file_id
        file_info = await bot.get_file(file_id)
        downloaded_file = await bot.download_file(file_info.file_path)

        image_stream = io.BytesIO(downloaded_file.read())
        image = Image.open(image_stream)

        recognized_csv_text = AnalysisService.run_ocr_on_image(image)
        print(recognized_csv_text)

        if not recognized_csv_text:
            await processing_message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ñ–æ—Ç–æ –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞.")
            return

        user_id = message.from_user.id

        # Parse the recognized CSV safely
        reader = csv.reader(io.StringIO(recognized_csv_text))
        rows = list(reader)

        if not rows:
            await processing_message.edit_text("–û—à–∏–±–∫–∞: CSV –ø—É—Å—Ç.")
            return

        data_rows = [[user_id] + row for row in rows if len(row) > 0]

        output = io.StringIO()
        writer = csv.writer(output)
        writer.writerows(data_rows)
        updated_csv_text = output.getvalue()

        AnalysisService.save_scan_to_csv(updated_csv_text)

        await processing_message.edit_text(
            "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é."
        )

    except Exception as e:
        await processing_message.edit_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: <code>{e}</code>", parse_mode="HTML"
        )
    finally:
        await state.clear()

@router.message(StateFilter(ScanState.waiting_for_photo), F.text)
async def process_scan_cancel(message: types.Message, state: FSMContext):
    if message.text.lower() in ['/cancel', '–æ—Ç–º–µ–Ω–∞']:
        await message.reply("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        await cmd_start(message) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    else:
        await message.reply("–Ø –æ–∂–∏–¥–∞—é —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /cancel.")


@router.message(Command("analyse"))
async def cmd_analyse(message: types.Message):
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω
    processing_message = await message.reply("üß† –°–æ—Å—Ç–∞–≤–ª—è—é –æ–±—â—É—é –∫–∞—Ä—Ç–∏–Ω—É –ø–æ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
    
    # –≠—Ç–æ—Ç –≤—ã–∑–æ–≤ —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏–∑ –≤—Å–µ—Ö —Å–∫–∞–Ω–æ–≤!
    result = AnalysisService.analyse_history(user_id=message.from_user.id)
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    await processing_message.edit_text(f"**–°–≤–æ–¥–∫–∞ –ø–æ –∞–Ω–∞–ª–∏–∑–∞–º:**\n\n{result.summary}")

@router.message(Command("history"))
async def cmd_history(message: types.Message):
    # Example: user can send "/history 7" to get last 7 days
    try:
        days = int(message.text.split()[1])
    except (IndexError, ValueError):
        days = None # all

    history = AnalysisService.get_history(message.from_user.id, days)
    if history.empty:
        await message.reply(f"–ù–µ—Ç –∞–Ω–∞–ª–∏–∑–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π" if days is not None else "–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –≤–∞—à–∏ –∞–Ω–∞–ª–∏–∑—ã") 
        return
    answer = []
    for _, row in history.iterrows():
        analysis_card = (
            f"üìÖ *–î–∞—Ç–∞:* `{row.get('date', 'N/A').strftime('%Y-%m-%d')}`\n"
            f"üî¨ *–ê–Ω–∞–ª–∏–∑:* {row.get('analysis', 'N/A')}\n"
            f"üìà *–†–µ–∑—É–ª—å—Ç–∞—Ç:* `{row.get('result', 'N/A')}`\n"
            f"ü©∫ *–°—Ç–∞—Ç—É—Å:* {row.get('status', 'N/A')}\n" +
            "‚îÄ" * 20 + "\n"
        )
        answer.append(analysis_card)
    await message.reply(''.join(answer))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥"
@router.message(F.text == "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥")
async def view_analysis_period(message: types.Message, state: FSMContext):
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–≤–≤–µ—Å—Ç–∏ –Ω–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞")],
            [types.KeyboardButton(text="—Å —Å–∞–º–æ–≥–æ —Ä–∞–Ω–Ω–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")],
            [types.KeyboardButton(text="–Ω–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞:", reply_markup=keyboard)
    await state.set_state(AnalysisPeriod.choosing_start)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞
@router.message(AnalysisPeriod.choosing_start, F.text.in_(["–≤–≤–µ—Å—Ç–∏ –Ω–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞", "—Å —Å–∞–º–æ–≥–æ —Ä–∞–Ω–Ω–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"]))
async def process_start_period(message: types.Message, state: FSMContext):
    if message.text == "–≤–≤–µ—Å—Ç–∏ –Ω–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD")
        await state.set_state(AnalysisPeriod.entering_start_date)
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É –∏–∑ CSV –∫–∞–∫ –Ω–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞
        await state.update_data(start_date=None)  # None –±—É–¥–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å "—Å —Å–∞–º–æ–π —Ä–∞–Ω–Ω–µ–π –¥–∞—Ç—ã"
        
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="–≤–≤–µ—Å—Ç–∏ –∫–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞")],
                [types.KeyboardButton(text="–¥–æ —Å–∞–º–æ–≥–æ –ø–æ–∑–¥–Ω–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")],
                [types.KeyboardButton(text="–Ω–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –∫–æ–Ω—Ü–∞ –ø–µ—Ä–∏–æ–¥–∞:", reply_markup=keyboard)
        await state.set_state(AnalysisPeriod.choosing_end)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞
@router.message(AnalysisPeriod.entering_start_date)
async def process_start_date(message: types.Message, state: FSMContext):
    if message.text == "–Ω–∞–∑–∞–¥":
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="–≤–≤–µ—Å—Ç–∏ –Ω–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞")],
                [types.KeyboardButton(text="—Å —Å–∞–º–æ–≥–æ —Ä–∞–Ω–Ω–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")],
                [types.KeyboardButton(text="–Ω–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞:", reply_markup=keyboard)
        await state.set_state(AnalysisPeriod.choosing_start)
        return
    
    try:
        start_date = datetime.strptime(message.text, '%Y-%m-%d').date()
        await state.update_data(start_date=start_date)
        
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="–≤–≤–µ—Å—Ç–∏ –∫–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞")],
                [types.KeyboardButton(text="–¥–æ —Å–∞–º–æ–≥–æ –ø–æ–∑–¥–Ω–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")],
                [types.KeyboardButton(text="–Ω–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –∫–æ–Ω—Ü–∞ –ø–µ—Ä–∏–æ–¥–∞:", reply_markup=keyboard)
        await state.set_state(AnalysisPeriod.choosing_end)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ü–∞ –ø–µ—Ä–∏–æ–¥–∞
@router.message(AnalysisPeriod.choosing_end, F.text.in_(["–≤–≤–µ—Å—Ç–∏ –∫–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞", "–¥–æ —Å–∞–º–æ–≥–æ –ø–æ–∑–¥–Ω–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"]))
async def process_end_period(message: types.Message, state: FSMContext):
    if message.text == "–≤–≤–µ—Å—Ç–∏ –∫–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD")
        await state.set_state(AnalysisPeriod.entering_end_date)
    else:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞—á–∞–ª–µ –ø–µ—Ä–∏–æ–¥–∞
        data = await state.get_data()
        start_date = data.get('start_date')
        
        # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await show_analysis_results(message, start_date, None)
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –∫–æ–Ω—Ü–∞ –ø–µ—Ä–∏–æ–¥–∞
@router.message(AnalysisPeriod.entering_end_date)
async def process_end_date(message: types.Message, state: FSMContext):
    if message.text == "–Ω–∞–∑–∞–¥":
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="–≤–≤–µ—Å—Ç–∏ –∫–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞")],
                [types.KeyboardButton(text="–¥–æ —Å–∞–º–æ–≥–æ –ø–æ–∑–¥–Ω–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")],
                [types.KeyboardButton(text="–Ω–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –∫–æ–Ω—Ü–∞ –ø–µ—Ä–∏–æ–¥–∞:", reply_markup=keyboard)
        await state.set_state(AnalysisPeriod.choosing_end)
        return
    
    try:
        end_date = datetime.strptime(message.text, '%Y-%m-%d').date()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞—á–∞–ª–µ –ø–µ—Ä–∏–æ–¥–∞
        data = await state.get_data()
        start_date = data.get('start_date')
        
        # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await show_analysis_results(message, start_date, end_date)
        await state.clear()
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥" –≤ —Ä–∞–∑–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö
@router.message(StateFilter(AnalysisPeriod), F.text == "–Ω–∞–∑–∞–¥")
async def process_back(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    
    if current_state == AnalysisPeriod.choosing_start:
        await cmd_start(message)
        await state.clear()
    elif current_state == AnalysisPeriod.choosing_end:
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="–≤–≤–µ—Å—Ç–∏ –Ω–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞")],
                [types.KeyboardButton(text="—Å —Å–∞–º–æ–≥–æ —Ä–∞–Ω–Ω–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")],
                [types.KeyboardButton(text="–Ω–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞:", reply_markup=keyboard)
        await state.set_state(AnalysisPeriod.choosing_start)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–æ–≤
async def show_analysis_results(message: types.Message, start_date, end_date):
    """
    –ß–∏—Ç–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∞–Ω–∞–ª–∏–∑–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ CSV,
    —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ –¥–∞—Ç–µ –∏ –∫—Ä–∞—Å–∏–≤–æ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    """
    user_id_to_find = str(message.from_user.id) # CSV —Ö—Ä–∞–Ω–∏—Ç –≤—Å–µ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
    output_filename = '/home/lopatin/Neymark_LabTracker/analysis_results.csv'

    try:
        with open(output_filename, 'r', encoding='utf-8') as file:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º DictReader –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–ª–æ–Ω–∫–∞–º –ø–æ –∏–º–µ–Ω–∏
            reader = csv.DictReader(file)
            user_analyses = [
                row for row in reader 
                if row.get('user_id') == user_id_to_find
            ]
            
            if not user_analyses:
                await message.answer("–í –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
                await cmd_start(message)
                return

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            min_date = min(datetime.strptime(row['date'], '%Y-%m-%d').date() for row in user_analyses if row.get('date'))
            max_date = max(datetime.strptime(row['date'], '%Y-%m-%d').date() for row in user_analyses if row.get('date'))
            
            actual_start = start_date if start_date else min_date
            actual_end = end_date if end_date else max_date
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑—ã –ø–æ –¥–∞—Ç–µ
            filtered_analyses = []
            for row in user_analyses:
                try:
                    analysis_date = datetime.strptime(row['date'], '%Y-%m-%d').date()
                    if actual_start <= analysis_date <= actual_end:
                        filtered_analyses.append(row)
                except (ValueError, TypeError):
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–∞—Ç–æ–π
                    continue
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if filtered_analyses:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
                filtered_analyses.sort(key=lambda x: x['date'])

                result_message = f"üìä *–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {actual_start} –ø–æ {actual_end}:*\n\n"
                for analysis in filtered_analyses:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º Markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    result_message += f"üìÖ *–î–∞—Ç–∞:* `{analysis.get('date', 'N/A')}`\n"
                    result_message += f"üî¨ *–ê–Ω–∞–ª–∏–∑:* {analysis.get('analysis', 'N/A')}\n"
                    result_message += f"üìà *–†–µ–∑—É–ª—å—Ç–∞—Ç:* `{analysis.get('result', 'N/A')}`\n"
                    result_message += f"ü©∫ *–°—Ç–∞—Ç—É—Å:* {analysis.get('status', 'N/A')}\n"
                    result_message += "‚îÄ" * 20 + "\n"
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Å—Ç—è–º–∏
                if len(result_message) > 4096:
                    for i in range(0, len(result_message), 4096):
                        await message.answer(result_message[i:i+4096], parse_mode="Markdown")
                else:
                    await message.answer(result_message, parse_mode="Markdown")
            else:
                await message.answer(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {actual_start} –ø–æ {actual_end}.")
    
    except FileNotFoundError:
        await message.answer("–§–∞–π–ª —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∞–Ω–∞–ª–∏–∑–æ–≤ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —Å–∫–∞–Ω.")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await cmd_start(message)